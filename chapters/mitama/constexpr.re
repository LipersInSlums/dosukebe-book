= 新たなる希望、constexpr

そもそもの問題として、テンプレートを駆使したメタプログラミングはわかりにくい。
通常のプログラミングとかけ離れすぎている。
コンパイル時にも普通のプログラミングがしたい。

C++11からこの要望を満たすため、@<code>{constexpr}指定子が登場した。
@<code>{constexpr}指定された変数はコンパイル時に初期化され。
@<code>{constexpr}指定された関数はコンパイル時に呼び出すことができる。
ただし、C++11では制限が多く、通常のプログラミングができるとは言いがたかった。

C++14で状況は一変し、
制限が緩和され変数宣言やローカル変数の書き換え、
制御分などがすべてconstexpr関数で行えるようになった。

C++17からはconstexpr ifが登場し、コンパイル時分岐が通常のif文のようにかけるようになった。
これにより、enable_ifで行っていた技法の半分くらいは代替できるようになった。

テンプレートの特殊化を条件分岐に使うという言語機能の悪用とも言えるメタプログラミングから、
わかりやすい方法で記述できるメタプログラミングへと舵を切ったのだ。

== constexpr関数
